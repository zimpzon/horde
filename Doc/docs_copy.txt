----------------------------------------------------------
COPY, don't change, formatting will be lost.
Use a text doc and merge it into the real doc later.
----------------------------------------------------------


HordeEngine

Links
Awesome links. Game design, procedural levels, etc.
https://www.pinterest.com/pin/531284087265912121/

light example: https://www.kickstarter.com/projects/829559023/confederate-express
https://www.youtube.com/watch?v=navKV6ZietM

Awesome graph connection algorithms!!
https://en.wikipedia.org/wiki/Gabriel_graph
https://en.wikipedia.org/wiki/Relative_neighborhood_graph

Selling Points
Need usable graphics and sound (please?)
Complete rogue-like experience.
Procedural generation. Multiple algorithms (Gabriel graphs, name more).
Data-oriented architecture and Unity job system for (not) optimal performance. Levels and objects are rendered with dynamic meshes, using zero game objects.
Use hundreds of lights. Extremely cheap 2D lighting. Static or dynamic.
No GC while playing for steady frame rates.
Free analytics integration (Playfab). Monitor playing users in real-time.
Easily reach thousands of players with WebGL. Kongregate template, login, highscore system and (referral detection, what is it called when other sites link to your game?) included.
Utility based plug and play AI system.
Localization? Application.Systemlanguage
Local multiplayer?
PlayMaker integration (maybe? Maybe not with data-orientated design. Need some way for non-programmers. Maybe Google docs for all setup or editor scripts. Or a special setup scene where all settings are stored).

*WebGL is currently always single threaded.

Terminology
GameObject (Unity)
This is a Unity GameObject. In HordeEngine enemies, projectiles and the like usually does not use GameObject for performance reasons. It is much faster to have 100 bullets represented by a tiny custom data structure than using 100 Unity gameobjects.

Actor
Any object that can be placed into a level. Camera, player, enemies, doors, player start position, etc. etc. An actor has potion, rotation and scale. An Actor does not require a GameObject, but may have one.

Component
Functionality added to an Actor.

Controller
A Controller makes decisions for an Actor, like a PlayerController or an AiController. A projectile that moves in a fixed direction does not need a Controller, but a projectile that chases the player would. (is this right? There is a default Controller).

Room
An enclosed space to be connected with other rooms in a map. Usually has a number of doors that the engine can choose to connect to other rooms or to close off if not used.

Map
Usually a number of connected rooms, but since it is just a 2D array of tiles it could be generated by other means.
Procedural
Generate 1 random per room inside a shape (circle, box, etc.). Use a graph connection method (Gabriel, REG, etc.) to create a graph. Expand points away from center until no rooms overlap (and some margin for connections). Then connect rooms. Possibly some A* method. Works best if rooms have many potential doors. If they haven’t (special rooms) swap places with the room most in the direction of the/a door opening.

Entities
Pawn -> Character
Component based. Can have both Controller and Interactable (ex. NPC)

Controllers
Anything that requires logic.
PlayerController (player input)
AiController (thinking) Composable! Vision, actions, etc.
Turrets (probably AIController)
Spikes (timed only)
Flames (timed)
Lasers (timed)
Moving obstacles.
Destructible (chairs etc).
Dynamic light (flashing, destructible)
Player ghosts (online)
Player text (online, like Dark Souls).
Portals (in-level, exit-level)

Examples:
Door
Player
Boss
Common enemy
turret
Floor spikes
Dynamic light
Chest
Pickup item

Interactable
Chest.
Npc
Pickups (health, key, ammo, weapon, etc.)
Door

Performance
https://forum.unity.com/threads/huge-performance-loss-in-mesh-createvbo-for-dynamic-meshes-ios.118723/
Ping-ponging/double buffering dynamic meshes is MUCH faster. Is this still a thing? Have to test.
Mesh.MarkDynamic might make it slower? see above thread.

Rendering
Data Structures
A map consists of chunks arranged in an unlimited (within int.Min and int.Max) virtual grid.
Each chunk contains a persistent lightmap (updated semi-rarely, ex torches on walls) and a dynamic lightmap (updated every frame).

Lighting
Generate mesh per light casting shadows, looking at collision map. Can use normals and 3d position of light).
Can be rendered on light texture = very cheap.
Automagically crosses chunk bounds.
Can flicker easily (color property).
Can be updated when a door within range changes state! Could even consider sprites if updated every frame (property on light, special effects, torch, boss, etc.).
Can turn on/off just by setting alpha.
Quality settings: No shadows (quad), Static Shadows (collision map), Dynamic Shadows (check dynamic collisions and update most frames)

Fake ambient occlusion? Darker where edges meet.
TRY vertex lighting with shadows?
Each light scans the surrounding tile visibility to determine the contribution for each lightmap texel. When a light is removed, subtract the contribution (so cache it). This means we have to store > 255 in the texels.
Aesthetics
Show neural network with flickering activity somewhere. Empathize AI and training. Remember the green “digital”colors. That old image. Also seen on google.
Game Concept
You start in a hub-room. Doors lead to randomly generated areas (refreshed when you die). You can pimp hub. Maybe add characters there. 

Rooms
Levels consists of rooms connected with hallways. Rooms are not allowed to share walls (makes torches easier, makes large flashes not care about adjacent rooms, etc.)

Mechanics
Bullettime, like Max Payne. Maybe you can move full speed.
Invisibility.
Dash.
Ambush (like Ciri in Witcher 3, rogue in WoW)
Trap walls opening (like Doom)
Ammo, reload, random weapons (see Nuclear Throne)
Melee combat (See Terraria and Dark Souls)
Room encounters, where doors lock.

Enemies that move over/through walls (see Terraria)
Enemies don’t use pathfinding, but LoS, last LoS, and breadcrumbs/smell/flow field.

Story
You are an AI being trained. Ideally you also train your own AI helper.
Pixel-you and flesh-you? Break fourth wall?


AI
Utility AI can be tested with AIs only!! OMGWOOT. Scared vs aggresive etc. They can even fight!! OMG.
Utility AI. Scores for friends close by, health, shock damage, player distance, player seen recently. Enemy temperament.
Chase - run towards target (visible or last seen).
Attack - fire, melee hit, explode, etc.
HideDefensive - out of harms way. Hide/flee.
HideOffensive - Maybe waiting for weapon CD, or luring player if melee. Don’t flee.
Panicked - don’t know where to flee to.

Buffs
Buffs are fire and forget (up to a maximum) and degrade over time (exponential moving average, maybe different rates (per personality)).
Hp
Shock
Friends nearby
Enemy nearby (good or bad depending on enemy)
Enemy LoS (good or bad depending on weapon ready etc.)
Enemy is targeting me.
CanFlee (if cornered might as well attack)
CanHide (is there any cover nearby?)
Reloading (cool if enemies have to reload,(that’s just plain CD, right?) could show bar like in Gungeon)
DistanceToCover
DistanceToEnemy

Could gameobjects be used to build behavior graph? Use GO graphs for all compositing prototypes in general? Could be in its own scene.
Enemies with regen. Run away and hide.


Tech 1.0
Engine must have components (ECS entity component system) coming out of its backfaces.
Separate rendering and data (could use instancing later). Run game logic at lower fps? Maybe sliced.
Make weapons owner independent.
Playfab analytics?
components on/off
separate: input/controls,
Heaviest: collision/closest, AI
Could all lights be occluded? Maybe a setting? A script that only updates if light moved (or map around it changed)?
Floor spikes?
Monsters and Monocles, Enter the Gungeon
Nuclear Throne style (blocky, destructible)
Enter the Gungeon style (rooms, non-destructible))



Business, selling points
NEED SOME editor scripts, just for selling point.
DO the Streets of Rogue fire (particles) for some lights, another selling point.
BUY some (pixel?) graphics online, another selling point! ACTUALLY might be huge.

Horde of enemies
No game objects. Job system? Doesn’t help in WebGL.
Flow fields might be fun and effective and SELL.
REINFORCEMENT LEARNING WOULD SELL!! https://www.youtube.com/watch?v=78nhJNPS0vA

Collision
How to handle collision with 1000s of enemies = spatial hashing.
Put in multiple nodes or create loose nodes.
Huge enemies are annoying. Either in tons of nodes or loose nodes must be huge. Could be handled separately since they are probably very few (ie. bosses).

Enemies
Data oriented.
Compact data by going from front and removing from back?
 - or compact on the fly every time one is destroyed. Get from back.
Boids/flocking.
Free for all, charm, pets, helpers, etc.



